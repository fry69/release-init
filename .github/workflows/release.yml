name: Build & (Draft) Release Deno binaries

# Tag pushes (recommended) and manual runs (workflow_dispatch)
on:
  # push:
  #   tags:
  #     - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional: tag to release (eg. v1.2.3). If empty the workflow will use v<tool_version>."
        required: false
        default: ""
      release_name:
        description: "Optional: release name/title (defaults to '<tool_name> <tool_version>')."
        required: false
        default: ""
      draft:
        description: "Create release as draft? (true/false). Default: true."
        required: false
        default: "true"

permissions:
  contents: write

jobs:
  # Check if project wants binary compilation (looks for compile:ci task)
  check-compile:
    name: Check if binary compilation is needed
    runs-on: ubuntu-latest
    outputs:
      should_compile: ${{ steps.meta.outputs.has_compile_task }}
      tool_name: ${{ steps.meta.outputs.tool_name }}
      tool_version: ${{ steps.meta.outputs.tool_version }}
      entry: ${{ steps.meta.outputs.entry }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - id: meta
        name: Extract tool metadata
        run: |
          deno run -A tools/get-meta.ts >> "$GITHUB_OUTPUT"

      - name: Show compilation status
        run: |
          echo "Binary compilation enabled: ${{ steps.meta.outputs.has_compile_task }}"
          if [ "${{ steps.meta.outputs.has_compile_task }}" = "true" ]; then
            echo "Will compile binaries using 'deno task compile:ci'"
          else
            echo "Skipping binary compilation (no 'compile:ci' task found)"
          fi
        shell: bash

  compile:
    name: Build binaries
    needs: check-compile
    if: needs.check-compile.outputs.should_compile == 'true'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: ""
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Compile with deno task
        run: |
          set -e
          OUT="dist/${{ needs.check-compile.outputs.tool_name }}-${{ needs.check-compile.outputs.tool_version }}-${{ matrix.target }}${{ matrix.ext }}"
          echo "Compiling: target=${{ matrix.target }} -> ${OUT}"
          mkdir -p dist
          # Use the project's compile:ci task with workflow-provided flags
          deno task compile:ci --target=${{ matrix.target }} --output="${OUT}" "${{ needs.check-compile.outputs.entry }}"
        shell: bash

      - name: Show dist
        run: ls -la dist || true
        shell: bash

      - name: Upload compiled artifact (per-target)
        uses: actions/upload-artifact@v4
        with:
          # artifact name identifies tool/version/target, so later we can find them easily
          name: ${{ needs.check-compile.outputs.tool_name }}-${{ needs.check-compile.outputs.tool_version }}-${{ matrix.target }}
          path: dist/**

  publish:
    name: Create (Draft) Release
    runs-on: ubuntu-latest
    needs: [check-compile, compile]
    if: always() && needs.check-compile.result == 'success'
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Download artifacts (if any were produced)
        if: needs.check-compile.outputs.should_compile == 'true' && needs.compile.result == 'success'
        uses: actions/download-artifact@v4
        with:
          # download all artifacts uploaded by the compile jobs of this run into ./artifacts/
          path: artifacts

      - name: Setup Deno (for changelog extraction)
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - id: meta
        name: Re-extract tool metadata
        run: |
          deno run -A tools/get-meta.ts >> "$GITHUB_OUTPUT"

      - id: determine-tag
        name: Determine tag to use for release
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
          TOOL_VERSION: ${{ steps.meta.outputs.tool_version }}
        run: |
          # Priority:
          # 1) If pushed tag event -> use that tag name
          # 2) Else if workflow_dispatch input 'tag' provided -> use that
          # 3) Else fallback to v<tool_version>
          tag=""
          if [ "$EVENT_NAME" = "push" ] && [[ "$GITHUB_REF" =~ refs/tags/ ]]; then
            tag="${GITHUB_REF#refs/tags/}"
          elif [ -n "$INPUT_TAG" ] && [ "$INPUT_TAG" != "" ]; then
            tag="$INPUT_TAG"
          else
            tag="v${TOOL_VERSION}"
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - id: determine-draft
        name: Determine draft setting
        shell: bash
        env:
          INPUT_DRAFT: ${{ github.event.inputs.draft }}
        run: |
          # Default to true (draft) unless user explicitly passed 'false' as workflow_dispatch input
          draft="true"
          if [ -n "${INPUT_DRAFT:-}" ] && [ "${INPUT_DRAFT}" = "false" ]; then
            draft="false"
          fi
          echo "draft=$draft" >> "$GITHUB_OUTPUT"

      - id: prepare-release-files
        name: Package build artifacts into zip files (if any)
        if: needs.check-compile.outputs.should_compile == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          # artifacts/* contains directories named after each artifact (the same names you uploaded in compile).
          # Zip each artifact directory into a single archive for uploading to the release.
          found=false
          if [ -d "artifacts" ]; then
            for d in artifacts/*; do
              if [ -d "$d" ]; then
                found=true
                name=$(basename "$d")
                echo "Packaging artifact directory '$d' -> release/${name}.zip"
                # Create zip with the contents of the artifact directory (do not preserve parent dir inside zip)
                # Use -r to recurse; -j is not used because we want subdirs to remain; but we will zip the directory contents.
                (cd "$d" && zip -r -q "../../release/${name}.zip" .)
              fi
            done
          fi
          if [ "$found" = "false" ]; then
            echo "WARNING: No artifacts found under artifacts/"
            echo "This is expected if no compile:ci task is defined"
          else
            ls -la release
          fi
          echo "has_artifacts=$found" >> "$GITHUB_OUTPUT"

      - id: changelog
        name: Extract CHANGELOG.md entry for version
        # Pass the version (without leading v) to the changelog helper
        shell: bash
        env:
          TAG: ${{ steps.determine-tag.outputs.tag }}
        run: |
          ver="${TAG#v}"
          changelog=$(deno run -A tools/get-changelog.ts "$ver")
          delimiter="EOF_$(uuidgen | tr -d '-')"
          echo "changelog<<${delimiter}" >> "$GITHUB_OUTPUT"
          echo "$changelog" >> "$GITHUB_OUTPUT"
          echo "${delimiter}" >> "$GITHUB_OUTPUT"

      - name: Create Release (draft by default)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.determine-tag.outputs.tag }}
          name: ${{ github.event.inputs.release_name != '' && github.event.inputs.release_name || format('{0} {1}', steps.meta.outputs.tool_name, steps.meta.outputs.tool_version) }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: ${{ steps.determine-draft.outputs.draft == 'true' }}
          artifacts: ${{ steps.prepare-release-files.outputs.has_artifacts == 'true' && 'release/*.zip' || '' }}
          allowUpdates: true
          omitBodyDuringUpdate: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release summary
        if: success()
        run: |
          echo "Release created (or updated). Check Releases page in GitHub."
          if [ "${{ needs.check-compile.outputs.should_compile }}" = "true" ]; then
            echo "Binary artifacts attached: ${{ steps.prepare-release-files.outputs.has_artifacts }}"
          else
            echo "No binary compilation (compile:ci task not found)"
          fi
